setwd("~/Dropbox/hsf/24-ss/ewa/ewa_papers/read_in_71/")
## ----echo=TRUE, message=FALSE, output = FALSE, warning=FALSE------------------------------------------
df_raw <- read.delim("Dataset 71.txt")
## ----include=FALSE------------------------------------------------------------------------------------
head_df_raw <- head(df_raw)
## ----echo=TRUE, message=FALSE, warning=FALSE----------------------------------------------------------
#| label: tbl-df_raw_glimpse
#| echo: false
## ----echo=TRUE, message=FALSE, warning=FALSE----------------------------------------------------------
#| label: tbl-df_raw_glimpse
#| echo: false
#| tbl-cap: "Ausschnitt des Rohdatensatz"
tt(head_df_raw[,1:11])
## ----echo=TRUE, message=FALSE, warning=FALSE----------------------------------------------------------
#| label: tbl-df_raw_unique
#| echo: false
## ----echo=TRUE, message=FALSE, warning=FALSE----------------------------------------------------------
#| label: tbl-df_raw_unique
#| echo: false
#| tbl-cap: "Unterschiedliche Werte in den Variablen"
uv <- df_raw |>
select(-ID) |>
as.matrix() |>
as.vector() |>
unique()
uv_item <- df_raw |>
select(-ID) |>
map(~ unique(c(., NaN)) |>  sort()) |>
enframe(name = "Attribute", value = "Values") |>
tibble()
# Create and display the table using kable
uv_item |>
kable("latex", booktabs = TRUE, longtable = TRUE)
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: tbl-df_long
#| echo: false
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: tbl-df_long
#| echo: false
#| tbl-cap: "Häufigkeitstabelle der unterschiedlichen Werte (pro item)"
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: tbl-df_long
#| echo: false
#| tbl-cap: "Häufigkeitstabelle der unterschiedlichen Werte (pro item)"
#| apa-note: "Die Tabelle zeigt an, in wie vielen Items die jeweiligen Werte vorkommen."
long <- df_raw  |>
pivot_longer(!ID, names_to = "item", values_to = "count") |>
distinct(item, count) |>
arrange(item, count)
long$count |>
tabyl() |>
kable("latex", booktabs = TRUE)
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: tbl-df_raw_skim
#| echo: false
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: tbl-df_raw_skim
#| echo: false
#| tbl-cap: "Deskriptive Statistiken zum Rohdatensatz"
datasummary_skim(df_raw, output = "latex")
## ----echo=TRUE, message=FALSE-------------------------------------------------------------------------
df_cosmetic <- df_raw |>
clean_names() |>
as_tibble() |>
# Ersetzen von NaN-Werten durch NA
mutate(across(everything(), ~ if_else(is.nan(.), NA, .))) |>
#Entfernen von Zeilen, bei denen alle "item_"-Spalten NA sind
rowwise() |>
filter(!all(across(starts_with("item_"), ~ is.na(.)))) |>
ungroup()
## ----echo=TRUE, message=FALSE-------------------------------------------------------------------------
df <- df_cosmetic |>
rowwise() |>
# Berechnung des größten absoluten Werts in "item_"-Spalten für jede Zeile
mutate(outlier = max(abs(c_across(starts_with("item_"))), na.rm = TRUE)) |>
# Markieren, ob ein Ausreißer (> 5 oder gleich 0) vorhanden ist
mutate(has_outlier = if_else(outlier > 5 | outlier == 0, TRUE, FALSE)) |>
# Zählen der Werte, die größer als 5 sind, für jede Zeile
mutate(count_larger_5 =
sum( c_across(starts_with("item_")) > 5 |
c_across(starts_with("item_")) == 0, na.rm = TRUE)) |>
# Zählen der Tippfehler (11, 22, 33, 44, 55) für jede Zeile
mutate(count_typos = sum(c_across(starts_with("item_")) %in%
c(11, 22, 33, 44, 55), na.rm = TRUE)) |>
# Markieren, ob mehr Werte größer als 5 sind als Tippfehler
mutate(has_larger_5_notypos = (count_typos < count_larger_5)) |>
# Markieren, ob Tippfehler vorhanden sind
mutate(has_typos = count_typos > 0 ) |>
# Markieren, ob NA-Werte in "item_"-Spalten vorhanden sind
mutate(has_nas = if_else(anyNA(pick(starts_with("item_"))), TRUE, FALSE)) |>
# Markieren, ob eine Zeile vollständig ist (keine Ausreißer und keine NAs)
mutate(complete = (has_outlier == FALSE & has_nas == FALSE)) |>
ungroup()
## ----echo=TRUE, message=FALSE-------------------------------------------------------------------------
# Labels definieren
likert_levels <- c(
"Stimme überhaupt nicht zu",
"Stimme nicht zu",
"Neutral",
"Stimme zu",
"Stimme voll und ganz zu"
)
# Faktorisierung der Items und hinzufügen eines Labels
df_chr <- df |>
mutate(across(starts_with("item_"),
~ case_when(
. == 1 ~ "Stimme überhaupt nicht zu",
. == 2 ~ "Stimme nicht zu",
. == 3 ~ "Neutral",
. == 4 ~ "Stimme zu",
. == 5 ~ "Stimme voll und ganz zu",
TRUE ~ as.character(.)
))) |>
mutate(across(starts_with("item_"), ~ factor(.x, levels = likert_levels)))
df_complete <- df_chr |>
filter(complete == TRUE)
## ----echo=TRUE, message=FALSE-------------------------------------------------------------------------
df_cleaned <- df |>
# Ersetzen von bestimmten Werten (11, 22, 33, 44, 55) in "item_"-Spalten
mutate(across(starts_with("item_"), ~ case_when(
. == 11 ~ 1,
. == 22 ~ 2,
. == 33 ~ 3,
. == 44 ~ 4,
. == 55 ~ 5,
TRUE ~ .
))) |>
# Ersetzen von Werten größer als 5 durch NA in "item_"-Spalten
mutate(across(starts_with("item_"), ~ if_else(. > 5 | . == 0, NA, .))) |>
mutate(across(starts_with("item_"),
~ case_when(
. == 1 ~ "Stimme überhaupt nicht zu",
. == 2 ~ "Stimme nicht zu",
. == 3 ~ "Neutral",
. == 4 ~ "Stimme zu",
. == 5 ~ "Stimme voll und ganz zu",
TRUE ~ as.character(.)
))) |>
mutate(across(starts_with("item_"), ~ factor(.x, levels = likert_levels)))
## ----echo=TRUE, message=FALSE-------------------------------------------------------------------------
save.image("data_71.RData")
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: fig-df_com_gglik
#| echo: false
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: fig-df_com_gglik
#| echo: false
#| fig-cap: "Antwortverteilung zu den gestellten Fragen (df_complete)"
gglikert(df_complete, include = starts_with("item_"))
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: fig-df_cle_gglik
#| echo: false
## ----echo=FALSE, message=FALSE, warning=FALSE---------------------------------------------------------
#| label: fig-df_cle_gglik
#| echo: false
#| fig-cap: "Antwortverteilung zu den gestellten Fragen (df_cleaned)"
gglikert(df_cleaned, include = starts_with("item_"))
df_raw <- read.delim("Dataset 71.txt")
head_df_raw <- head(df_raw)
tt(head_df_raw[,1:11])
if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled)
rm(list = ls())
setwd("~/Dropbox/hsf/24-ss/ewa/ewa_papers/read_in_71/")
getwd()
df_raw <- read.delim("Dataset 71.txt")
head_df_raw <- head(df_raw)
tt(head_df_raw[,1:11])
install.packages(c("arm", "arrow", "backports", "bookdown", "brio", "broom", "broom.helpers", "bslib", "cachem", "callr", "coda", "collapse", "commonmark", "cowplot", "crayon", "crul", "curl", "DBI", "dbplyr", "deldir", "dials", "digest", "downlit", "DT", "duckdb", "dunn.test", "effectsize", "emmeans", "estimability", "evaluate", "farver", "fastmap", "flextable", "fs", "ftExtra", "future", "future.apply", "gdtools", "GGally", "gganimate", "ggeffects", "ggforce", "ggfortify", "ggmulti", "ggraph", "ggrepel", "ggsci", "ggstats", "ggthemes", "gh", "globals", "gmodels", "graphlayouts", "gtable", "hardhat", "highr", "Hmisc", "hrbrthemes", "htmltools", "httpuv", "httr2", "igraph", "infer", "interp", "iNZightMR", "iNZightRegression", "kableExtra", "knitr", "labelled", "lava", "leaps", "lhs", "listenv", "lme4", "loon.ggplot", "maditr", "magick", "markdown", "matrixStats", "minqa", "modeldata", "multcompView", "munsell", "mvtnorm", "nloptr", "officer", "openssl", "parallelly", "parsnip", "patchwork", "pbkrtest", "phia", "pkgbuild", "pkgdown", "pkgload", "plotly", "prodlim", "promises", "ps", "quantreg", "R.oo", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readODS", "readr", "recipes", "rempsyc", "renv", "repr", "reprex", "rio", "rmarkdown", "rnaturalearthdata", "roxygen2", "rsample", "rsconnect", "RSQLite", "rstudioapi", "rticles", "rvest", "sass", "shape", "shiny", "shinytest", "sjmisc", "sjPlot", "sjstats", "sp", "SparseM", "stevetemplates", "stringi", "survey", "systemfonts", "testthat", "textshaping", "this.path", "tidygraph", "tidymodels", "tidyr", "timechange", "tune", "uuid", "viridis", "workflows", "workflowsets", "xfun", "xopen", "yardstick", "zip"))
install.packages(c("arm", "arrow", "backports", "bookdown", "brio", "broom", "broom.helpers", "bslib", "cachem", "callr", "coda", "collapse", "commonmark", "cowplot", "crayon", "crul", "curl", "DBI", "dbplyr", "deldir", "dials", "digest", "downlit", "DT", "duckdb", "dunn.test", "effectsize", "emmeans", "estimability", "evaluate", "farver", "fastmap", "flextable", "fs", "ftExtra", "future", "future.apply", "gdtools", "GGally", "gganimate", "ggeffects", "ggforce", "ggfortify", "ggmulti", "ggraph", "ggrepel", "ggsci", "ggstats", "ggthemes", "gh", "globals", "gmodels", "graphlayouts", "gtable", "hardhat", "highr", "Hmisc", "hrbrthemes", "htmltools", "httpuv", "httr2", "igraph", "infer", "interp", "iNZightMR", "iNZightRegression", "kableExtra", "knitr", "labelled", "lava", "leaps", "lhs", "listenv", "lme4", "loon.ggplot", "maditr", "magick", "markdown", "matrixStats", "minqa", "modeldata", "multcompView", "munsell", "mvtnorm", "nloptr", "officer", "openssl", "parallelly", "parsnip", "patchwork", "pbkrtest", "phia", "pkgbuild", "pkgdown", "pkgload", "plotly", "prodlim", "promises", "ps", "quantreg", "R.oo", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readODS", "readr", "recipes", "rempsyc", "renv", "repr", "reprex", "rio", "rmarkdown", "rnaturalearthdata", "roxygen2", "rsample", "rsconnect", "RSQLite", "rstudioapi", "rticles", "rvest", "sass", "shape", "shiny", "shinytest", "sjmisc", "sjPlot", "sjstats", "sp", "SparseM", "stevetemplates", "stringi", "survey", "systemfonts", "testthat", "textshaping", "this.path", "tidygraph", "tidymodels", "tidyr", "timechange", "tune", "uuid", "viridis", "workflows", "workflowsets", "xfun", "xopen", "yardstick", "zip"))
install.packages(c("arm", "arrow", "backports", "bookdown", "brio", "broom", "broom.helpers", "bslib", "cachem", "callr", "coda", "collapse", "commonmark", "cowplot", "crayon", "crul", "curl", "DBI", "dbplyr", "deldir", "dials", "digest", "downlit", "DT", "duckdb", "dunn.test", "effectsize", "emmeans", "estimability", "evaluate", "farver", "fastmap", "flextable", "fs", "ftExtra", "future", "future.apply", "gdtools", "GGally", "gganimate", "ggeffects", "ggforce", "ggfortify", "ggmulti", "ggraph", "ggrepel", "ggsci", "ggstats", "ggthemes", "gh", "globals", "gmodels", "graphlayouts", "gtable", "hardhat", "highr", "Hmisc", "hrbrthemes", "htmltools", "httpuv", "httr2", "igraph", "infer", "interp", "iNZightMR", "iNZightRegression", "kableExtra", "knitr", "labelled", "lava", "leaps", "lhs", "listenv", "lme4", "loon.ggplot", "maditr", "magick", "markdown", "matrixStats", "minqa", "modeldata", "multcompView", "munsell", "mvtnorm", "nloptr", "officer", "openssl", "parallelly", "parsnip", "patchwork", "pbkrtest", "phia", "pkgbuild", "pkgdown", "pkgload", "plotly", "prodlim", "promises", "ps", "quantreg", "R.oo", "ragg", "Rcpp", "RcppArmadillo", "RcppEigen", "reactR", "readODS", "readr", "recipes", "rempsyc", "renv", "repr", "reprex", "rio", "rmarkdown", "rnaturalearthdata", "roxygen2", "rsample", "rsconnect", "RSQLite", "rstudioapi", "rticles", "rvest", "sass", "shape", "shiny", "shinytest", "sjmisc", "sjPlot", "sjstats", "sp", "SparseM", "stevetemplates", "stringi", "survey", "systemfonts", "testthat", "textshaping", "this.path", "tidygraph", "tidymodels", "tidyr", "timechange", "tune", "uuid", "viridis", "workflows", "workflowsets", "xfun", "xopen", "yardstick", "zip"))
knitr
library("ez")
?ez
df_raw <- read.delim("Dataset 71.txt")
ezPrecis(
df_raw
, transpose = TRUE
)
ezPrecis(
df_raw
, transpose = F
)
ezPrecis(
df_raw
, transpose = T
)
tt(ezPrecis(
df_raw
, transpose = T
))
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled, ez)
tt(ezPrecis(
df_raw
, transpose = T
))
?ezPrecis
citation("ezPrecis")
citation("ez")
View(df_raw)
ez_raw <- ezPrecis(
df_raw
, transpose = T
)
View(ez_raw)
setwd("/home/sthu/Dropbox/hsf/github/ewa/ss_24/rmd_festuca/")
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled, ez)
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled, ez)
rm(list = ls())
df_raw <- read.delim("Dataset 71.txt")
uv <- df_raw |>
select(-ID) |>
as.matrix() |>
as.vector() |>
unique()
uv_item <- df_raw |>
select(-ID) |>
map(~ list(Values = unique(.) |> sort())) |>
enframe(name = "Attribute", value = "Values") |>
tibble()
df_cosmetic <- df_raw |>
clean_names() |>
as_tibble() |>
# Ersetzen von NaN-Werten durch NA
mutate(across(everything(), ~ if_else(is.nan(.), NA, .))) |>
#Entfernen von Zeilen, bei denen alle "item_"-Spalten NA sind
rowwise() |>
filter(!all(across(starts_with("item_"), ~ is.na(.)))) |>
ungroup()
df <- df_cosmetic |>
rowwise() |>
# Berechnung des größten absoluten Werts in "item_"-Spalten für jede Zeile
mutate(outlier = max(abs(c_across(starts_with("item_"))), na.rm = TRUE)) |>
# Markieren, ob ein Ausreißer (> 5 oder gleich 0) vorhanden ist
mutate(has_outlier = if_else(outlier > 5 | outlier == 0, TRUE, FALSE)) |>
# Zählen der Werte, die größer als 5 sind, für jede Zeile
mutate(count_larger_5 =
sum( c_across(starts_with("item_")) > 5 |
c_across(starts_with("item_")) == 0, na.rm = TRUE)) |>
# Zählen der Tippfehler (11, 22, 33, 44, 55) für jede Zeile
mutate(count_typos = sum(c_across(starts_with("item_")) %in%
c(11, 22, 33, 44, 55), na.rm = TRUE)) |>
# Markieren, ob mehr Werte größer als 5 sind als Tippfehler
mutate(has_larger_5_notypos = (count_typos < count_larger_5)) |>
# Markieren, ob Tippfehler vorhanden sind
mutate(has_typos = count_typos > 0 ) |>
# Markieren, ob NA-Werte in "item_"-Spalten vorhanden sind
mutate(has_nas = if_else(anyNA(pick(starts_with("item_"))), TRUE, FALSE)) |>
# Markieren, ob eine Zeile vollständig ist (keine Ausreißer und keine NAs)
mutate(complete = (has_outlier == FALSE & has_nas == FALSE)) |>
ungroup()
View(df)
# Labels definieren
likert_levels <- c(
"Stimme überhaupt nicht zu",
"Stimme nicht zu",
"Neutral",
"Stimme zu",
"Stimme voll und ganz zu"
)
# Faktorisierung der Items und hinzufügen eines Labels
df_chr <- df |>
mutate(across(starts_with("item_"),
~ case_when(
. == 1 ~ "Stimme überhaupt nicht zu",
. == 2 ~ "Stimme nicht zu",
. == 3 ~ "Neutral",
. == 4 ~ "Stimme zu",
. == 5 ~ "Stimme voll und ganz zu",
TRUE ~ as.character(.)
))) |>
mutate(across(starts_with("item_"), ~ factor(.x, levels = likert_levels)))
df_complete <- df_chr |>
filter(complete == TRUE)
View(df_complete)
getwd()
knitr::purl("doc_read_in_71.qmd")
## ----echo=TRUE, message=FALSE---------------------------------------------------------------------------------------
if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled)
rm(list = ls())
setwd("~/Dropbox/hsf/24-ss/ewa/ewa_papers/read_in_71/")
setwd("~/Music/ewa/ss_24/read_in_71")
setwd("~/Music/ewa/ss_24/read_in_71")
df_raw <- read.delim("Dataset 71.txt")
## ----echo=TRUE, message=FALSE---------------------------------------------------------------------------------------
df_cosmetic <- df_raw |>
clean_names() |>
as_tibble() |>
# Ersetzen von NaN-Werten durch NA
mutate(across(everything(), ~ if_else(is.nan(.), NA, .))) |>
#Entfernen von Zeilen, bei denen alle "item_"-Spalten NA sind
rowwise() |>
filter(!all(across(starts_with("item_"), ~ is.na(.)))) |>
ungroup()
## ----echo=TRUE, message=FALSE---------------------------------------------------------------------------------------
df <- df_cosmetic |>
rowwise() |>
# Berechnung des größten absoluten Werts in "item_"-Spalten für jede Zeile
mutate(outlier = max(abs(c_across(starts_with("item_"))), na.rm = TRUE)) |>
# Markieren, ob ein Ausreißer (> 5 oder gleich 0) vorhanden ist
mutate(has_outlier = if_else(outlier > 5 | outlier == 0, TRUE, FALSE)) |>
# Zählen der Werte, die größer als 5 sind, für jede Zeile
mutate(count_larger_5 =
sum( c_across(starts_with("item_")) > 5 |
c_across(starts_with("item_")) == 0, na.rm = TRUE)) |>
# Zählen der Tippfehler (11, 22, 33, 44, 55) für jede Zeile
mutate(count_typos = sum(c_across(starts_with("item_")) %in%
c(11, 22, 33, 44, 55), na.rm = TRUE)) |>
# Markieren, ob mehr Werte größer als 5 sind als Tippfehler
mutate(has_larger_5_notypos = (count_typos < count_larger_5)) |>
# Markieren, ob Tippfehler vorhanden sind
mutate(has_typos = count_typos > 0 ) |>
# Markieren, ob NA-Werte in "item_"-Spalten vorhanden sind
mutate(has_nas = if_else(anyNA(pick(starts_with("item_"))), TRUE, FALSE)) |>
# Markieren, ob eine Zeile vollständig ist (keine Ausreißer und keine NAs)
mutate(complete = (has_outlier == FALSE & has_nas == FALSE)) |>
ungroup()
## ----echo=TRUE, message=FALSE---------------------------------------------------------------------------------------
# Labels definieren
likert_levels <- c(
"Stimme überhaupt nicht zu",
"Stimme nicht zu",
"Neutral",
"Stimme zu",
"Stimme voll und ganz zu"
)
# Faktorisierung der Items und hinzufügen eines Labels
df_chr <- df |>
mutate(across(starts_with("item_"),
~ case_when(
. == 1 ~ "Stimme überhaupt nicht zu",
. == 2 ~ "Stimme nicht zu",
. == 3 ~ "Neutral",
. == 4 ~ "Stimme zu",
. == 5 ~ "Stimme voll und ganz zu",
TRUE ~ as.character(.)
))) |>
mutate(across(starts_with("item_"), ~ factor(.x, levels = likert_levels)))
df_complete <- df_chr |>
filter(complete == TRUE)
## ----echo=TRUE, message=FALSE---------------------------------------------------------------------------------------
df_cleaned <- df |>
# Ersetzen von bestimmten Werten (11, 22, 33, 44, 55) in "item_"-Spalten
mutate(across(starts_with("item_"), ~ case_when(
. == 11 ~ 1,
. == 22 ~ 2,
. == 33 ~ 3,
. == 44 ~ 4,
. == 55 ~ 5,
TRUE ~ .
))) |>
# Ersetzen von Werten größer als 5 durch NA in "item_"-Spalten
mutate(across(starts_with("item_"), ~ if_else(. > 5 | . == 0, NA, .))) |>
mutate(across(starts_with("item_"),
~ case_when(
. == 1 ~ "Stimme überhaupt nicht zu",
. == 2 ~ "Stimme nicht zu",
. == 3 ~ "Neutral",
. == 4 ~ "Stimme zu",
. == 5 ~ "Stimme voll und ganz zu",
TRUE ~ as.character(.)
))) |>
mutate(across(starts_with("item_"), ~ factor(.x, levels = likert_levels)))
## ----echo=TRUE, message=FALSE---------------------------------------------------------------------------------------
save.image("data_71.RData")
df_complete
df_rename <- df_complete |>
rename(item_1 = super)
df_rename <- df_complete |>
rename(super = item_1)
View(df)
df_rename <- df |>
rename(super = item_2)  |>
mutate(item_1_recode = case_when(
item_1 == 1 ~ 5,
item_1 == 2 ~ 4,
item_1 == 3 ~ 3,
item_1 == 4 ~ 2,
item_1 == 5 ~ 1
))
head(df_rename)
case_when(
x == 1 ~ 5,
x == 2 ~ 4,
x == 3 ~ 3,
x == 4 ~ 2,
x == 5 ~ 1,
TRUE ~ x
)
# Function to recode values
recode_items <- function(x) {
case_when(
x == 1 ~ 5,
x == 2 ~ 4,
x == 3 ~ 3,
x == 4 ~ 2,
x == 5 ~ 1,
TRUE ~ x
)
}
# Apply the recode function to each variable that starts with "item_"
df_rename2 <- df %>%
mutate(across(starts_with("item_"), recode_items, .names = "{col}_recode"))
View(df_rename2)
rm(list = setdiff(ls(), c("df_complete", "df_raw", "df_cleaned", "df")))
sessionInfo()
R.versio
R.version
R.version$version.string
load("/home/sthu/Dropbox/hsf/github/ewa/ss_24/read_in_71/data_71.RData")
?t.test()
if (!require(pacman)) install.packages("pacman")
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled)
pacman::p_load(tidyverse, janitor, psych, tinytable, ggstats,
modelsummary, knitr, kableExtra, labelled)
rm(list = ls())
df_raw <- read.delim("Dataset 71.txt")
head_df_raw <- head(df_raw)
uv <- df_raw |>
select(-ID) |>
as.matrix() |>
as.vector() |>
unique()
uv_item <- df_raw |>
select(-ID) |>
map(~ list(Values = unique(.) |> sort())) |>
enframe(name = "Attribute", value = "Values") |>
tibble()
# Create and display the table using kable
uv_item |>
kable("latex", booktabs = TRUE, longtable = TRUE)
long <- df_raw  |>
pivot_longer(!ID, names_to = "item", values_to = "count") |>
distinct(item, count) |>
arrange(item, count)
long$count |>
tabyl() |>
kable("latex", booktabs = TRUE)
df_cosmetic <- df_raw |>
clean_names() |>
as_tibble() |>
# Ersetzen von NaN-Werten durch NA
mutate(across(everything(), ~ if_else(is.nan(.), NA, .))) |>
#Entfernen von Zeilen, bei denen alle "item_"-Spalten NA sind
rowwise() |>
filter(!all(across(starts_with("item_"), ~ is.na(.)))) |>
ungroup()
df_cosmetic <- df_raw |>
clean_names() |>
as_tibble() |>
# Ersetzen von NaN-Werten durch NA
mutate(across(everything(), ~ if_else(is.nan(.), NA, .))) |>
#Entfernen von Zeilen, bei denen alle "item_"-Spalten NA sind
rowwise() |>
drop_na() |>
ungroup()
df <- df_cosmetic |>
rowwise() |>
# Berechnung des größten absoluten Werts in "item_"-Spalten für jede Zeile
mutate(outlier = max(abs(c_across(starts_with("item_"))), na.rm = TRUE)) |>
# Markieren, ob ein Ausreißer (> 5 oder gleich 0) vorhanden ist
mutate(has_outlier = if_else(outlier > 5 | outlier == 0, TRUE, FALSE)) |>
# Zählen der Werte, die größer als 5 sind, für jede Zeile
mutate(count_larger_5 =
sum( c_across(starts_with("item_")) > 5 |
c_across(starts_with("item_")) == 0, na.rm = TRUE)) |>
# Zählen der Tippfehler (11, 22, 33, 44, 55) für jede Zeile
mutate(count_typos = sum(c_across(starts_with("item_")) %in%
c(11, 22, 33, 44, 55), na.rm = TRUE)) |>
# Markieren, ob mehr Werte größer als 5 sind als Tippfehler
mutate(has_larger_5_notypos = (count_typos < count_larger_5)) |>
# Markieren, ob Tippfehler vorhanden sind
mutate(has_typos = count_typos > 0 ) |>
# Markieren, ob NA-Werte in "item_"-Spalten vorhanden sind
mutate(has_nas = if_else(anyNA(pick(starts_with("item_"))), TRUE, FALSE)) |>
# Markieren, ob eine Zeile vollständig ist (keine Ausreißer und keine NAs)
mutate(complete = (has_outlier == FALSE & has_nas == FALSE)) |>
ungroup()
# Labels definieren
likert_levels <- c(
"Stimme überhaupt nicht zu",
"Stimme nicht zu",
"Neutral",
"Stimme zu",
"Stimme voll und ganz zu"
)
# Faktorisierung der Items und hinzufügen eines Labels
df_chr <- df |>
mutate(across(starts_with("item_"),
~ case_when(
. == 1 ~ "Stimme überhaupt nicht zu",
. == 2 ~ "Stimme nicht zu",
. == 3 ~ "Neutral",
. == 4 ~ "Stimme zu",
. == 5 ~ "Stimme voll und ganz zu",
TRUE ~ as.character(.)
))) |>
mutate(across(starts_with("item_"), ~ factor(.x, levels = likert_levels)))
df_complete <- df_chr |>
filter(complete == TRUE)
df_complete <- df_chr |>  drop_na()
df_complete <- df_chr
df_complete <- df_chr |>  drop_na()
df_complete <- df_chr |>
filter(complete == TRUE)
